[{"/Users/zwe/dev/cah-webgame/ts-client/src/index.tsx":"1","/Users/zwe/dev/cah-webgame/ts-client/src/reportWebVitals.ts":"2","/Users/zwe/dev/cah-webgame/ts-client/src/App.tsx":"3","/Users/zwe/dev/cah-webgame/ts-client/src/contexts/SocketContext.ts":"4","/Users/zwe/dev/cah-webgame/ts-client/src/screens/Home.tsx":"5","/Users/zwe/dev/cah-webgame/ts-client/src/screens/Room.tsx":"6","/Users/zwe/dev/cah-webgame/ts-client/src/constants.ts":"7","/Users/zwe/dev/cah-webgame/ts-client/src/hooks/useLocalStorage.ts":"8","/Users/zwe/dev/cah-webgame/ts-client/src/components/Lobby.tsx":"9","/Users/zwe/dev/cah-webgame/ts-client/src/components/Navbar.tsx":"10","/Users/zwe/dev/cah-webgame/ts-client/src/game/ui/GameRoom.tsx":"11","/Users/zwe/dev/cah-webgame/ts-client/src/game/ui/ScoreBoard.tsx":"12","/Users/zwe/dev/cah-webgame/ts-client/src/game/ui/Whitecard.tsx":"13","/Users/zwe/dev/cah-webgame/ts-client/src/game/ui/WinnerCard.tsx":"14","/Users/zwe/dev/cah-webgame/ts-client/src/game/ui/Blackcard.tsx":"15"},{"size":500,"mtime":1620961156998,"results":"16","hashOfConfig":"17"},{"size":425,"mtime":1620961156999,"results":"18","hashOfConfig":"17"},{"size":885,"mtime":1620961156994,"results":"19","hashOfConfig":"17"},{"size":267,"mtime":1620961156995,"results":"20","hashOfConfig":"17"},{"size":2105,"mtime":1625132619047,"results":"21","hashOfConfig":"17"},{"size":3362,"mtime":1625175522491,"results":"22","hashOfConfig":"17"},{"size":270,"mtime":1620961156995,"results":"23","hashOfConfig":"17"},{"size":597,"mtime":1620961156997,"results":"24","hashOfConfig":"17"},{"size":4184,"mtime":1620961156994,"results":"25","hashOfConfig":"17"},{"size":1686,"mtime":1620961156994,"results":"26","hashOfConfig":"17"},{"size":8697,"mtime":1620961156996,"results":"27","hashOfConfig":"17"},{"size":1485,"mtime":1620961156996,"results":"28","hashOfConfig":"17"},{"size":1596,"mtime":1620961156996,"results":"29","hashOfConfig":"17"},{"size":499,"mtime":1620961156996,"results":"30","hashOfConfig":"17"},{"size":423,"mtime":1620961156995,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"ot6ppn",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"/Users/zwe/dev/cah-webgame/ts-client/src/index.tsx",[],["66","67"],"/Users/zwe/dev/cah-webgame/ts-client/src/reportWebVitals.ts",[],"/Users/zwe/dev/cah-webgame/ts-client/src/App.tsx",[],"/Users/zwe/dev/cah-webgame/ts-client/src/contexts/SocketContext.ts",[],"/Users/zwe/dev/cah-webgame/ts-client/src/screens/Home.tsx",[],"/Users/zwe/dev/cah-webgame/ts-client/src/screens/Room.tsx",["68"],"import { useState, useEffect, useContext, useRef } from \"react\";\nimport Lobby from \"../components/Lobby\";\nimport { SocketContext } from \"../contexts/SocketContext\";\nimport GameRoom from \"../game/ui/GameRoom\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { User, Setting } from \"../interfaces\";\n\ninterface Props {\n  history: any;\n  match: any;\n}\n\nvar defaultSetting: Setting = {\n  rounds: 3,\n  toggleNSFW: false,\n};\n\nexport default function Room({ match, history }: Props) {\n  const roomCode = match.params.roomId;\n  const [users, setUsers] = useLocalStorage(`room-Users-${roomCode}`, []);\n  const [hostUser, setHostUser] = useLocalStorage(\n    `host-User-${roomCode}`,\n    undefined\n  );\n  const [currentUser, setCurrentUser] = useLocalStorage(\n    `current-User-${history.location.state.clientId}`,\n    undefined\n  );\n  const [lastJoined, setLastJoined] = useState<number | null>(null);\n  const [gameStarted, setGameStarted] = useState<boolean>(false);\n  const [setting, changeSetting] = useState<Setting>(defaultSetting);\n  const settingRef = useRef(defaultSetting);\n  settingRef.current = setting;\n  \n  const socket = useContext(SocketContext);\n\n  useEffect(() => {\n    socket.emit(\"get room users\", {\n      roomCode: roomCode,\n    });\n    socket.emit(\"get room setting\", { roomCode: roomCode });\n  }, [roomCode, socket]);\n\n  useEffect(() => {\n    socket.on(\"room status\", ({ clients }: { clients: User[] }) => {\n      setUsers(clients);\n      if (clients.length !== 0) {\n        setLastJoined(clients.length - 1);\n        setHostUser(clients[0]);\n        var id: string | undefined = history.location.state.clientId;\n        setCurrentUser(clients.find((client) => client.id === id));\n      }\n    });\n  }, [users, socket]);\n\n  useEffect(() => {\n    socket.on(\"setting update\", ({ settings }: { settings: Setting }) => {\n      if (hostUser && currentUser) {\n        if (hostUser.id !== currentUser.id) {\n          changeSetting(settings);\n        }\n      }\n    });\n    socket.on(\"game start update\", () => {\n      setGameStarted(true);\n    });\n  });\n\n  const handleSetting = (e: any) => {\n    const { name, value, checked } = e.target;\n    const parse_value = parseInt(value);\n    if(checked !== undefined){\n      changeSetting((prevState) => ({\n        ...prevState,\n        toggleNSFW: checked,\n      }));\n    } else {\n      changeSetting((prevState) => ({\n        ...prevState,\n        [name]: parse_value,\n      }));\n    }\n    setTimeout(() => {\n      socket.emit(\"change setting\", {\n        settings: settingRef.current,\n        roomCode: roomCode,\n      });\n    }, 500);\n  };\n\n  const handleStartGame = () => {\n    if(users.length > 2){\n      setGameStarted(true);\n      socket.emit(\"start game\", { roomCode: roomCode });\n      socket.emit(\"game state init\", { roomCode: roomCode });\n    } else {\n      alert(\"Not enough players.\")\n    }\n  };\n  \n\n  return (\n    <>\n      {gameStarted ? (\n        <GameRoom currentUser = {currentUser} roomCode = {roomCode} setting = {settingRef.current} history={history}/>\n      ) : (\n        <Lobby\n          setting={setting}\n          handleSetting={handleSetting}\n          players={users}\n          hostPlayer={hostUser}\n          currentPlayer={currentUser}\n          lastJoined={lastJoined}\n          handleStartGame={handleStartGame}\n          match={match}\n        />\n      )}\n    </>\n  );\n}\n","/Users/zwe/dev/cah-webgame/ts-client/src/constants.ts",[],"/Users/zwe/dev/cah-webgame/ts-client/src/hooks/useLocalStorage.ts",[],"/Users/zwe/dev/cah-webgame/ts-client/src/components/Lobby.tsx",[],"/Users/zwe/dev/cah-webgame/ts-client/src/components/Navbar.tsx",[],"/Users/zwe/dev/cah-webgame/ts-client/src/game/ui/GameRoom.tsx",["69"],"import ScoreBoard from \"./ScoreBoard\";\nimport { User, Player, WhiteCard, BlackCard, Setting } from \"../../interfaces\";\nimport { useState, useContext, useEffect } from \"react\";\nimport Whitecard from \"./Whitecard\";\nimport Blackcard from \"./Blackcard\";\nimport WinnerCard from \"./WinnerCard\";\nimport { SocketContext } from \"../../contexts/SocketContext\";\n\ninterface Props {\n  currentUser: User;\n  roomCode: string;\n  setting: Setting;\n  history: any;\n}\n\nexport default function GameRoom(props: Props) {\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [currentPlayer, setCurrentPlayer] = useState<Player>();\n  const [currentBlackCard, setCurrentBlackCard] = useState<BlackCard | null>(\n    null\n  );\n  const [currentWhiteCard, setWhiteCard] = useState<WhiteCard>();\n  const [judgeWhiteCard, setJudgeWhiteCard] = useState<WhiteCard>();\n  const [winnerCard, setWinnerCard] = useState<WhiteCard>();\n  const [winnerPlayer, setWinnerPlayer] = useState<string>();\n  const [playedCards, setPlayedCards] = useState<WhiteCard[]>([]);\n  const [judgeMode, setJudgeMode] = useState(false);\n  const [submitClicked, setSubmitClicked] = useState(false);\n  const [nextClicked, setNextClicked] = useState(false);\n  const [hideNext, setHideNext] = useState(true);\n  const [hideSubmit, setHideSubmit] = useState(false);\n  const [round, setRound] = useState<Number>(1);\n\n  const [gameOver, setGameOver] = useState(false);\n  const socket = useContext(SocketContext);\n\n  useEffect(() => {\n    socket.on(\n      \"game init update\",\n      ({ players, blackCard }: { players: Player[]; blackCard: BlackCard }) => {\n        setPlayers(players);\n        const player = extractCurrentPlayer(players);\n        setCurrentPlayer(player);\n        setCurrentBlackCard(blackCard);\n        setWhiteCard(player?.cards[0]);\n      }\n    );\n\n    socket.on(\n      \"game state update player\",\n      ({\n        players,\n        shuffled,\n      }: {\n        players: Player[];\n        shuffled: WhiteCard[];\n      }) => {\n        setPlayers(players);\n        const player = extractCurrentPlayer(players);\n        setCurrentPlayer(player);\n        setPlayedCards(shuffled);\n        setJudgeMode(true);\n        setSubmitClicked(false);\n        setHideSubmit(true);\n      }\n    );\n    socket.on(\n      \"game state update judge\",\n      ({\n        players,\n        winnerCard,\n      }: {\n        players: Player[];\n        winnerCard: WhiteCard;\n      }) => {\n        setPlayers(players);\n        const player = extractCurrentPlayer(players);\n        setCurrentPlayer(player);\n        setWinnerCard(winnerCard);\n        setWinnerPlayer(extractPlayerById(winnerCard.cardOwner));\n        setJudgeMode(false);\n        setSubmitClicked(false);\n        setHideNext(false);\n      }\n    );\n\n    socket.on(\n        \"players update\",\n        ({\n          players,\n        }: {\n          players: Player[];\n        }) => {\n          setPlayers(players);\n          const player = extractCurrentPlayer(players);\n          setCurrentPlayer(player);\n        }\n      );\n\n    socket.on(\n      \"next turn client\",\n      ({\n        players,\n        blackCard,\n        round,\n      }: {\n        players: Player[];\n        blackCard: BlackCard;\n        round: Number;\n      }) => {\n        setPlayers(players);\n        const player = extractCurrentPlayer(players);\n        setCurrentPlayer(player);\n        setCurrentBlackCard(blackCard);\n        setPlayedCards([]);\n        setWhiteCard(undefined);\n        setWinnerCard(undefined);\n        setWinnerPlayer(undefined);\n        setJudgeWhiteCard(undefined);\n        setJudgeMode(false);\n        setSubmitClicked(false);\n        setNextClicked(false);\n        setHideSubmit(false);\n        setHideNext(true);\n        setRound(round);\n        if(round > props.setting.rounds) setGameOver(true);\n      }\n    );\n  }, [players]);\n\n  const extractCurrentPlayer = (players: Player[]) => {\n    for (let i = 0; i < players.length; i++) {\n      if (players[i].id === props.currentUser?.id) {\n        return players[i];\n      }\n    }\n  };\n\n  const extractPlayerById = (playerId: string | undefined) => {\n    for (let i = 0; i < players.length; i++) {\n      if (players[i].id === playerId) {\n        return players[i].name;\n      }\n    }\n  };\n\n  const handlePlayerSelect = (card: WhiteCard) => {\n    setWhiteCard(card);\n  };\n\n  const handleJudgeSelect = (card: WhiteCard) => {\n    setJudgeWhiteCard(card);\n  };\n\n  const renderWhiteCards = () => {\n    return (\n      <div>\n        {!currentPlayer?.isJudge && !hideSubmit && renderSubmitButton()}\n        <p>Your cards: </p>\n        {currentPlayer &&\n          currentPlayer.cards.map((card: WhiteCard, i: any) => {\n            return (\n              <div key={i}>\n                <Whitecard\n                  type=\"white\"\n                  card={card}\n                  handlePlayerSelect={handlePlayerSelect}\n                  currentWhiteCard={currentWhiteCard}\n                  currentPlayer={currentPlayer}\n                />\n              </div>\n            );\n          })}\n      </div>\n    );\n  };\n\n  const renderCurrentBlackCard = () => {\n    return (\n      <div>\n        <p>Black card: </p>\n        {currentBlackCard && <Blackcard card={currentBlackCard} />}\n        {winnerCard && winnerPlayer && (\n          <WinnerCard card={winnerCard} name={winnerPlayer} />\n        )}\n      </div>\n    );\n  };\n\n  const renderCardsReceived = () => {\n    return (\n      <div>\n        {renderSubmitButton()}\n        <p>Cards received (Judge Mode) : </p>\n        {playedCards.map((card: WhiteCard, i: any) => {\n          return (\n            <div key={i}>\n              <Whitecard\n                type=\"white-judge\"\n                card={card}\n                handleJudgeSelect={handleJudgeSelect}\n                judgeWhiteCard={judgeWhiteCard}\n                currentPlayer={currentPlayer}\n              />\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const renderCardsPlayed = () => {\n    return (\n      <div>\n        <p>Cards played : </p>\n        {playedCards.map((card: WhiteCard, i: any) => {\n          return (\n            <div key={i}>\n              <Whitecard card={card} disabled={true} />\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const handleSubmit = () => {\n    if (judgeMode) {\n      if (judgeWhiteCard) {\n        socket.emit(\"card select by judge\", {\n          cardId: judgeWhiteCard.id,\n          playerId: currentPlayer?.id,\n          roomCode: props.roomCode,\n        });\n        setSubmitClicked(true);\n      }\n    } else {\n      if (currentWhiteCard && !submitClicked) {\n          socket.emit(\"card select by player\", {\n            cardId: currentWhiteCard.id,\n            playerId: currentPlayer?.id,\n            roomCode: props.roomCode,\n          });\n          setSubmitClicked(true);\n      } \n    }\n  };\n\n  const renderSubmitButton = () => {\n    return (\n      <div>\n        <button\n          className={`${\n            submitClicked ? \"bg-green-500\" : \"bg-red-500\"\n          } hover:bg-green-500 text-white h-10 w-28 `}\n          onClick={handleSubmit}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  };\n\n  const handleNext = () => {\n    setNextClicked(true);\n    socket.emit(\"next turn\", {\n      playerId: currentPlayer?.id,\n      roomCode: props.roomCode,\n    });\n  };\n\n  const renderNextButton = () => {\n    return (\n      <div>\n        <button\n          className={`${\n            nextClicked ? \"bg-green-500\" : \"bg-yellow-500\"\n          } hover:bg-green-500 text-white h-10 w-28 `}\n          onClick={handleNext}\n        >\n          Next\n        </button>\n      </div>\n    );\n  };\n\n  const renderGameOver = () => {\n    return (\n      <div>\n        <p>Game Over</p>\n        <button\n          className=\"bg-blue-500 hover:bg-gray-500 text-white h-10 w-28 \"\n          onClick={() => {\n            socket.emit(\"delete room\", {roomCode: props.roomCode});\n            props.history.push(\"/\");\n          }}\n        >\n          Back to Home\n        </button>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <p>Game Room</p>\n      <ScoreBoard players={players} gameOver={gameOver}/>\n      {gameOver ? (\n        renderGameOver()\n      ) : (\n        <div>\n          <p className=\"text-2xl\">Round: {round}</p>\n          <div className=\"grid grid-cols-3 gap-10 mt-11\">\n            <div>{currentPlayer && renderWhiteCards()}</div>\n            <div>\n              {!hideNext && renderNextButton()}\n              {renderCurrentBlackCard()}\n              {playedCards && renderCardsPlayed()}\n            </div>\n            <div>\n              {currentPlayer?.isJudge && judgeMode && renderCardsReceived()}\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","/Users/zwe/dev/cah-webgame/ts-client/src/game/ui/ScoreBoard.tsx",[],"/Users/zwe/dev/cah-webgame/ts-client/src/game/ui/Whitecard.tsx",[],"/Users/zwe/dev/cah-webgame/ts-client/src/game/ui/WinnerCard.tsx",[],["70","71"],"/Users/zwe/dev/cah-webgame/ts-client/src/game/ui/Blackcard.tsx",[],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","severity":1,"message":"77","line":54,"column":6,"nodeType":"78","endLine":54,"endColumn":21,"suggestions":"79"},{"ruleId":"76","severity":1,"message":"80","line":129,"column":6,"nodeType":"78","endLine":129,"endColumn":15,"suggestions":"81"},{"ruleId":"72","replacedBy":"82"},{"ruleId":"74","replacedBy":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'history.location.state.clientId', 'setCurrentUser', 'setHostUser', and 'setUsers'. Either include them or remove the dependency array.","ArrayExpression",["86"],"React Hook useEffect has missing dependencies: 'extractCurrentPlayer', 'extractPlayerById', 'props.setting.rounds', and 'socket'. Either include them or remove the dependency array.",["87"],["84"],["85"],"no-global-assign","no-unsafe-negation",{"desc":"88","fix":"89"},{"desc":"90","fix":"91"},"Update the dependencies array to be: [users, socket, setUsers, setHostUser, history.location.state.clientId, setCurrentUser]",{"range":"92","text":"93"},"Update the dependencies array to be: [extractCurrentPlayer, extractPlayerById, players, props.setting.rounds, socket]",{"range":"94","text":"95"},[1728,1743],"[users, socket, setUsers, setHostUser, history.location.state.clientId, setCurrentUser]",[3805,3814],"[extractCurrentPlayer, extractPlayerById, players, props.setting.rounds, socket]"]