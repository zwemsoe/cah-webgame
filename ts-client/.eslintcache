[{"/Users/zwe/Desktop/cah-webgame/ts-client/src/index.tsx":"1","/Users/zwe/Desktop/cah-webgame/ts-client/src/reportWebVitals.ts":"2","/Users/zwe/Desktop/cah-webgame/ts-client/src/App.tsx":"3","/Users/zwe/Desktop/cah-webgame/ts-client/src/screens/Home.tsx":"4","/Users/zwe/Desktop/cah-webgame/ts-client/src/screens/Room.tsx":"5","/Users/zwe/Desktop/cah-webgame/ts-client/src/utils.ts":"6","/Users/zwe/Desktop/cah-webgame/ts-client/src/components/Navbar.tsx":"7","/Users/zwe/Desktop/cah-webgame/ts-client/src/hooks/useLocalStorage.ts":"8","/Users/zwe/Desktop/cah-webgame/ts-client/src/contexts/SocketContext.ts":"9"},{"size":500,"mtime":1612988111843,"results":"10","hashOfConfig":"11"},{"size":425,"mtime":1612988111844,"results":"12","hashOfConfig":"11"},{"size":709,"mtime":1612988111842,"results":"13","hashOfConfig":"11"},{"size":2685,"mtime":1613118418503,"results":"14","hashOfConfig":"11"},{"size":3443,"mtime":1613118097584,"results":"15","hashOfConfig":"11"},{"size":489,"mtime":1612988111845,"results":"16","hashOfConfig":"11"},{"size":1380,"mtime":1613118142898,"results":"17","hashOfConfig":"11"},{"size":597,"mtime":1612988111843,"results":"18","hashOfConfig":"11"},{"size":214,"mtime":1612988111842,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"ce1qkj",{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/zwe/Desktop/cah-webgame/ts-client/src/index.tsx",[],["40","41"],"/Users/zwe/Desktop/cah-webgame/ts-client/src/reportWebVitals.ts",[],"/Users/zwe/Desktop/cah-webgame/ts-client/src/App.tsx",[],"/Users/zwe/Desktop/cah-webgame/ts-client/src/screens/Home.tsx",["42"],"/Users/zwe/Desktop/cah-webgame/ts-client/src/screens/Room.tsx",["43","44"],"import React, { useState, useEffect, useContext } from \"react\";\nimport { SocketContext } from \"../contexts/SocketContext\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { User } from \"../interfaces\";\n\ninterface Props {\n  history: any;\n  match: any;\n}\n\nexport default function Room({ match, history }: Props) {\n  const roomCode = match.params.roomId;\n  const [players, setPlayers] = useLocalStorage(`room-players-${roomCode}`, []);\n  const [hostPlayer, setHostPlayer] = useLocalStorage(\n    `host-player-${roomCode}`,\n    undefined\n  );\n  const [currentPlayer, setCurrentPlayer] = useLocalStorage(\n    `current-player-${history.location.state.clientId}`,\n    undefined\n  );\n  const [lastJoined, setLastJoined] = useState<number | null>(null);\n  const socket = useContext(SocketContext);\n\n  useEffect(() => {\n    console.log(\"This runs again after reload\");\n    console.log(\"Socket\", socket);\n    socket.emit(\"get room users\", {\n      roomCode: roomCode,\n    });\n  }, []);\n\n  useEffect(() => {\n    console.log(\"Socket\", socket);\n    console.log(\"Players\", players);\n    socket.on(\"room status\", ({ clients }: { clients: User[] }) => {\n      console.log(`Clients: `, clients);\n      setPlayers(clients);\n      if (clients.length !== 0) {\n        setLastJoined(clients.length - 1);\n        setHostPlayer(clients[0]);\n        var id: string | undefined = history.location.state.clientId;\n        setCurrentPlayer(clients.find((client) => client.id === id));\n      }\n    });\n  }, [players]);\n\n  const renderStartGameBtn = () => {\n    if (hostPlayer && currentPlayer) {\n      if (hostPlayer.id === currentPlayer.id) {\n        return (\n          <div>\n            <button className=\"bg-yellow-500 hover:bg-yellow-300 text-black font-bold h-10 w-28 rounded\">Start Game</button>\n          </div>\n        );\n      }\n    }\n  };\n\n  return (\n    <>\n      <p className=\"font-extrabold\">{lastJoined !== null && players[lastJoined].name + \" joined.\"}</p>\n      <p className=\"font-bold\">Players List:</p>\n      <ul className=\"mb-5\">\n        {players.map((player: any, i: number) => {\n          return (\n            <li key={i}>\n              - {player.name}{\" \"}\n              {(hostPlayer && hostPlayer.id) === player.id && \"(Host)\"}\n            </li>\n          );\n        })}\n      </ul>\n\n\n      <p className=\"font-bold\">Settings</p>\n\n      <label htmlFor=\"rounds-select\" className=\"mr-5\">Number of Rounds:</label>\n      <select className=\"w-auto border bg-white rounded px-3 py-2 outline-none\" name=\"rounds-select\">\n        <option value=\"3\" selected>\n          3\n        </option>\n        <option value=\"4\">4</option>\n        <option value=\"5\">5</option>\n      </select>\n        <br/>\n\n      <label htmlFor=\"judge-select\" className=\"mr-5\">Judge Time:</label>\n      <select className=\"w-auto border bg-white rounded px-3 py-2 outline-none\" name=\"judge-select\">\n        <option value=\"60\" selected>\n          60s\n        </option>\n        <option value=\"90\">90s</option>\n        <option value=\"120\">120s</option>\n      </select>\n      <br/>\n\n      <label htmlFor=\"pick-select\" className=\"mr-5\">Pick Time:</label>\n      <select className=\"w-auto border bg-white rounded px-3 py-2 outline-none mb-2\" name=\"pick-select\">\n        <option value=\"60\" selected>\n          60s\n        </option>\n        <option value=\"90\">90s</option>\n        <option value=\"120\">120s</option>\n      </select>\n      <br/>\n\n      {renderStartGameBtn()}\n    </>\n  );\n}\n","/Users/zwe/Desktop/cah-webgame/ts-client/src/utils.ts",[],"/Users/zwe/Desktop/cah-webgame/ts-client/src/components/Navbar.tsx",[],"/Users/zwe/Desktop/cah-webgame/ts-client/src/hooks/useLocalStorage.ts",[],"/Users/zwe/Desktop/cah-webgame/ts-client/src/contexts/SocketContext.ts",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":14,"column":10,"nodeType":"51","messageId":"52","endLine":14,"endColumn":20},{"ruleId":"53","severity":1,"message":"54","line":31,"column":6,"nodeType":"55","endLine":31,"endColumn":8,"suggestions":"56"},{"ruleId":"53","severity":1,"message":"57","line":46,"column":6,"nodeType":"55","endLine":46,"endColumn":15,"suggestions":"58"},"no-native-reassign",["59"],"no-negated-in-lhs",["60"],"@typescript-eslint/no-unused-vars","'randomCode' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'roomCode' and 'socket'. Either include them or remove the dependency array.","ArrayExpression",["61"],"React Hook useEffect has missing dependencies: 'history.location.state.clientId', 'setCurrentPlayer', 'setHostPlayer', 'setPlayers', and 'socket'. Either include them or remove the dependency array.",["62"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},{"desc":"65","fix":"66"},"Update the dependencies array to be: [roomCode, socket]",{"range":"67","text":"68"},"Update the dependencies array to be: [history.location.state.clientId, players, setCurrentPlayer, setHostPlayer, setPlayers, socket]",{"range":"69","text":"70"},[983,985],"[roomCode, socket]",[1491,1500],"[history.location.state.clientId, players, setCurrentPlayer, setHostPlayer, setPlayers, socket]"]