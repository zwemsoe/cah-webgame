[{"/Users/zwe/Desktop/cah-webgame/ts-client/src/index.tsx":"1","/Users/zwe/Desktop/cah-webgame/ts-client/src/reportWebVitals.ts":"2","/Users/zwe/Desktop/cah-webgame/ts-client/src/App.tsx":"3","/Users/zwe/Desktop/cah-webgame/ts-client/src/screens/Home.tsx":"4","/Users/zwe/Desktop/cah-webgame/ts-client/src/screens/Room.tsx":"5","/Users/zwe/Desktop/cah-webgame/ts-client/src/components/Navbar.tsx":"6","/Users/zwe/Desktop/cah-webgame/ts-client/src/hooks/useLocalStorage.ts":"7","/Users/zwe/Desktop/cah-webgame/ts-client/src/contexts/SocketContext.ts":"8","/Users/zwe/Desktop/cah-webgame/ts-client/src/utils/index.ts":"9","/Users/zwe/Desktop/cah-webgame/ts-client/src/components/Lobby.tsx":"10","/Users/zwe/Desktop/cah-webgame/ts-client/src/game/ui/GameRoom.tsx":"11","/Users/zwe/Desktop/cah-webgame/ts-client/src/game/ui/ScoreBoard.tsx":"12","/Users/zwe/Desktop/cah-webgame/ts-client/src/game/ui/Whitecard.tsx":"13","/Users/zwe/Desktop/cah-webgame/ts-client/src/game/ui/Blackcard.tsx":"14","/Users/zwe/Desktop/cah-webgame/ts-client/src/game/ui/WinnerCard.tsx":"15","/Users/zwe/Desktop/cah-webgame/ts-client/src/constants.ts":"16"},{"size":500,"mtime":1612988111843,"results":"17","hashOfConfig":"18"},{"size":425,"mtime":1612988111844,"results":"19","hashOfConfig":"18"},{"size":895,"mtime":1613724858965,"results":"20","hashOfConfig":"18"},{"size":2082,"mtime":1613704156777,"results":"21","hashOfConfig":"18"},{"size":3338,"mtime":1613726755826,"results":"22","hashOfConfig":"18"},{"size":1593,"mtime":1613724325378,"results":"23","hashOfConfig":"18"},{"size":597,"mtime":1612988111843,"results":"24","hashOfConfig":"18"},{"size":267,"mtime":1613724843661,"results":"25","hashOfConfig":"18"},{"size":489,"mtime":1613435812177,"results":"26","hashOfConfig":"18"},{"size":4184,"mtime":1613727176028,"results":"27","hashOfConfig":"18"},{"size":8633,"mtime":1613724064552,"results":"28","hashOfConfig":"18"},{"size":1452,"mtime":1613683578999,"results":"29","hashOfConfig":"18"},{"size":1596,"mtime":1613683579000,"results":"30","hashOfConfig":"18"},{"size":434,"mtime":1613683578998,"results":"31","hashOfConfig":"18"},{"size":499,"mtime":1613683579001,"results":"32","hashOfConfig":"18"},{"size":270,"mtime":1613723929577,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"ce1qkj",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"36"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"36"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"36"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/zwe/Desktop/cah-webgame/ts-client/src/index.tsx",[],["75","76"],"/Users/zwe/Desktop/cah-webgame/ts-client/src/reportWebVitals.ts",[],"/Users/zwe/Desktop/cah-webgame/ts-client/src/App.tsx",["77"],"import { useEffect, useState } from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport Home from \"./screens/Home\";\nimport Room from './screens/Room';\nimport {SocketContext, socket} from './contexts/SocketContext';\n\nconst App = () => {\n  const [clientName, setClientName] = useState<string>(\"\");\n\n  useEffect(() => {\n    return () => {\n      console.log(\"unmounting\");\n      socket.close();\n    };\n  }, []);\n\n\n  return (\n    <BrowserRouter>\n      <Switch> \n        <SocketContext.Provider value={socket}>\n          <Route path='/' exact render={(props) => <Home {...props} setClientName={setClientName}/>} />\n          <Route path='/game/:roomId' exact render={(props) => clientName ? <Room {...props}/> : <Home {...props} setClientName={setClientName}/>} />\n        </SocketContext.Provider>\n    </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default App;","/Users/zwe/Desktop/cah-webgame/ts-client/src/screens/Home.tsx",["78"],"import { useState, useEffect, useContext } from \"react\";\nimport { Navbar } from \"../components/Navbar\";\nimport { SocketContext } from \"../contexts/SocketContext\";\nimport { v4 as uuid } from 'uuid';\n\ninterface Props {\n  history: any,\n  setClientName: any,\n  match: any,\n}\n\nexport default function Home({ history, setClientName, match }: Props) {\n  const [name, setName] = useState(\"\");\n  const [code, setCode] = useState(\"\");\n  const [isLoading, setLoading] = useState(false);\n  const socket = useContext(SocketContext);\n  \n  useEffect(() => {\n    const roomCode = match.params.roomId;\n    if(match.params.roomId){\n      setCode(roomCode);\n    } else {\n      setCode(uuid());\n    }\n  }, []);\n\n  const handleJoin = () => {\n    if(name){\n      setLoading(true);\n\n      const clientId = uuid();\n      socket.emit(\"join room\", {\n        roomCode: code,\n        clientName: name,\n        clientId: clientId,\n      });\n\n      setTimeout(() => {\n        history.push(\"/game/\" + code, { clientId });\n        setClientName(name);\n      }, 2000);\n    } else {\n      alert(\"Please fill in your name.\")\n    }\n    \n  };\n\n\n  if (isLoading) {\n    return (\n      <>\n        <p className=\"font-extrabold\">Loading...</p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Navbar />\n      <div className=\"grid place-items-center w-screen h-screen\">\n        <div>\n          <div className=\"max-w-md bg-white border-2 border-gray-300 p-6 rounded-md tracking-wide shadow-lg\">\n            <input\n              className=\"rounded-sm px-4 py-3 mt-3 focus:outline-none bg-gray-100 w-full\"\n              type=\"text\"\n              placeholder=\"Your Name\"\n              onChange={(e) => {\n                setName(e.target.value);\n              }}\n            />\n            <div className=\"grid grid-flow-col mt-3\">\n              <button\n                className=\"bg-yellow-500 hover:bg-yellow-300 text-black font-bold h-10 rounded-full\"\n                onClick={handleJoin}\n              >\n                Join\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/zwe/Desktop/cah-webgame/ts-client/src/screens/Room.tsx",["79","80"],"import { useState, useEffect, useContext, useRef } from \"react\";\nimport Lobby from \"../components/Lobby\";\nimport { SocketContext } from \"../contexts/SocketContext\";\nimport GameRoom from \"../game/ui/GameRoom\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { User, Setting } from \"../interfaces\";\n\ninterface Props {\n  history: any;\n  match: any;\n}\n\nvar defaultSetting: Setting = {\n  rounds: 3,\n  toggleNSFW: false,\n};\n\nexport default function Room({ match, history }: Props) {\n  const roomCode = match.params.roomId;\n  const [users, setUsers] = useLocalStorage(`room-Users-${roomCode}`, []);\n  const [hostUser, setHostUser] = useLocalStorage(\n    `host-User-${roomCode}`,\n    undefined\n  );\n  const [currentUser, setCurrentUser] = useLocalStorage(\n    `current-User-${history.location.state.clientId}`,\n    undefined\n  );\n  const [lastJoined, setLastJoined] = useState<number | null>(null);\n  const [gameStarted, setGameStarted] = useState<boolean>(false);\n  const [setting, changeSetting] = useState<Setting>(defaultSetting);\n  const settingRef = useRef(defaultSetting);\n  settingRef.current = setting;\n  \n  const socket = useContext(SocketContext);\n\n  useEffect(() => {\n    socket.emit(\"get room users\", {\n      roomCode: roomCode,\n    });\n    socket.emit(\"get room setting\", { roomCode: roomCode });\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"room status\", ({ clients }: { clients: User[] }) => {\n      setUsers(clients);\n      if (clients.length !== 0) {\n        setLastJoined(clients.length - 1);\n        setHostUser(clients[0]);\n        var id: string | undefined = history.location.state.clientId;\n        setCurrentUser(clients.find((client) => client.id === id));\n      }\n    });\n  }, [users]);\n\n  useEffect(() => {\n    socket.on(\"setting update\", ({ settings }: { settings: Setting }) => {\n      if (hostUser && currentUser) {\n        if (hostUser.id !== currentUser.id) {\n          changeSetting(settings);\n        }\n      }\n    });\n    socket.on(\"game start update\", () => {\n      setGameStarted(true);\n    });\n  });\n\n  const handleSetting = (e: any) => {\n    const { name, value, checked } = e.target;\n    const parse_value = parseInt(value);\n    if(checked !== undefined){\n      changeSetting((prevState) => ({\n        ...prevState,\n        toggleNSFW: checked,\n      }));\n    } else {\n      changeSetting((prevState) => ({\n        ...prevState,\n        [name]: parse_value,\n      }));\n    }\n    setTimeout(() => {\n      socket.emit(\"change setting\", {\n        settings: settingRef.current,\n        roomCode: roomCode,\n      });\n    }, 500);\n  };\n\n  const handleStartGame = () => {\n    if(users.length > 1){\n      setGameStarted(true);\n      socket.emit(\"start game\", { roomCode: roomCode });\n      socket.emit(\"game state init\", { roomCode: roomCode });\n    } else {\n      alert(\"Not enough players.\")\n    }\n  };\n  \n\n  return (\n    <>\n      {gameStarted ? (\n        <GameRoom currentUser = {currentUser} roomCode = {roomCode} setting = {settingRef.current} history={history}/>\n      ) : (\n        <Lobby\n          setting={setting}\n          handleSetting={handleSetting}\n          players={users}\n          hostPlayer={hostUser}\n          currentPlayer={currentUser}\n          lastJoined={lastJoined}\n          handleStartGame={handleStartGame}\n          match={match}\n        />\n      )}\n    </>\n  );\n}\n","/Users/zwe/Desktop/cah-webgame/ts-client/src/components/Navbar.tsx",["81","82","83"],"export const Navbar = () => {\n  return (\n    <header className=\"border-b md:flex md:items-center md:justify-between p-4 pb-0 shadow-lg md:pb-4 rounded-b-xl bg-black\">\n      <div className=\"flex items-center justify-between mb-4 md:mb-0\">\n        <p className=\"leading-none text-2xl text-grey-darkest\">\n          <a className=\"no-underline text-white hover:text-black\" href=\"/#\">\n            Cards Against Humanity Online\n          </a>\n        </p>\n      </div>\n      <nav>\n        <ul className=\"list-reset md:flex md:items-center\">\n          <li className=\"md:ml-4\">\n            <a\n              className=\"block no-underline hover:underline py-2 text-white hover:text-gray-200 md:border-none md:p-0\"\n              href=\"https://youtu.be/Uyciy8LmmXg\"\n              target=\"_blank\"\n            >\n              How to Play\n            </a>\n          </li>\n          <li className=\"md:ml-4\">\n            <a\n              className=\"border-t block no-underline hover:underline py-2 text-white hover:text-gray-200 md:border-none md:p-0\"\n              href=\"https://github.com/zwemsoe/cah-webgame.git\"\n              target=\"_blank\"\n            >\n              About\n            </a>\n          </li>\n          <li className=\"md:ml-4\">\n            <a\n              className=\"border-t block no-underline hover:underline py-2 text-white hover:text-gray-200 md:border-none md:p-0\"\n              href=\"https://www.linkedin.com/in/zwe-min-soe-0b15091a8/\"\n              target=\"_blank\"\n            >\n              Contact\n            </a>\n          </li>\n        </ul>\n      </nav>\n    </header>\n  );\n};\n","/Users/zwe/Desktop/cah-webgame/ts-client/src/hooks/useLocalStorage.ts",[],"/Users/zwe/Desktop/cah-webgame/ts-client/src/contexts/SocketContext.ts",[],"/Users/zwe/Desktop/cah-webgame/ts-client/src/utils/index.ts",[],["84","85"],"/Users/zwe/Desktop/cah-webgame/ts-client/src/components/Lobby.tsx",[],"/Users/zwe/Desktop/cah-webgame/ts-client/src/game/ui/GameRoom.tsx",[],"/Users/zwe/Desktop/cah-webgame/ts-client/src/game/ui/ScoreBoard.tsx",["86"],"import { Player } from \"../../interfaces\";\nimport { useState, useEffect } from \"react\";\n\ninterface Props {\n  players: Player[];\n  gameOver?: boolean;\n}\n\nexport default function ScoreBoard(props: Props) {\n  const [gameWinner, setGameWinner] = useState<Player[]>();\n\n  useEffect(() => {\n      if(props.gameOver){\n        const max_points = props.players.reduce(\n            (max, p) => (p.points > max ? p.points : max),\n            props.players[0].points\n          );\n          const player = props.players.filter((p) => p.points === max_points);\n          setGameWinner(player);\n      }\n  })\n\n  const renderPlayerState = (player: Player) => {\n    if (player?.isJudge) {\n      return `${player.name} : ${player.points} (Judge)`;\n    } else {\n      return `${player.name} : ${player.points} ${\n        player.submitClicked || player.nextClicked ? \"ready\" : \"waiting...\"\n      }`;\n    }\n  };\n  return (\n    <div>\n      <p>Score Board: </p>\n      <ul>\n        {props.players.map((player: Player, i: any) => {\n          return <li key={i}>{renderPlayerState(player)}</li>;\n        })}\n      </ul>\n      {props.gameOver && (\n        <div>\n          <p>Winner(s): </p>\n          <ul>\n            {gameWinner?.map((player: Player, i: any) => {\n              return (\n                <li key={i}>\n                  {player.name} : {player.points}\n                </li>\n              );\n            })}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n}\n","/Users/zwe/Desktop/cah-webgame/ts-client/src/game/ui/Whitecard.tsx",[],"/Users/zwe/Desktop/cah-webgame/ts-client/src/game/ui/Blackcard.tsx",["87"],"import { BlackCard, WhiteCard } from \"../../interfaces\";\n\ninterface Props {\n  card: BlackCard;\n}\nexport default function Blackcard(props: Props) {\n  return (\n    <>\n        <div className=\"max-w-xs rounded overflow-hidden shadow-lg my-2 bg-black\">\n          <div className=\"px-6 py-4\">\n            <p className=\"text-white text-base\">\n              {props.card.content}\n            </p>\n          </div>\n        </div>\n    </>\n  );\n}\n","/Users/zwe/Desktop/cah-webgame/ts-client/src/game/ui/WinnerCard.tsx",[],["88","89"],"/Users/zwe/Desktop/cah-webgame/ts-client/src/constants.ts",[],{"ruleId":"90","replacedBy":"91"},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","severity":1,"message":"95","line":2,"column":40,"nodeType":"96","messageId":"97","endLine":2,"endColumn":48},{"ruleId":"98","severity":1,"message":"99","line":25,"column":6,"nodeType":"100","endLine":25,"endColumn":8,"suggestions":"101"},{"ruleId":"98","severity":1,"message":"102","line":42,"column":6,"nodeType":"100","endLine":42,"endColumn":8,"suggestions":"103"},{"ruleId":"98","severity":1,"message":"104","line":54,"column":6,"nodeType":"100","endLine":54,"endColumn":13,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":14,"column":13,"nodeType":"108","endLine":18,"endColumn":14},{"ruleId":"106","severity":1,"message":"107","line":23,"column":13,"nodeType":"108","endLine":27,"endColumn":14},{"ruleId":"106","severity":1,"message":"107","line":32,"column":13,"nodeType":"108","endLine":36,"endColumn":14},{"ruleId":"90","replacedBy":"109"},{"ruleId":"92","replacedBy":"110"},{"ruleId":"98","severity":1,"message":"111","line":12,"column":3,"nodeType":"96","endLine":12,"endColumn":12,"suggestions":"112"},{"ruleId":"94","severity":1,"message":"113","line":1,"column":21,"nodeType":"96","messageId":"97","endLine":1,"endColumn":30},{"ruleId":"90","replacedBy":"114"},{"ruleId":"92","replacedBy":"115"},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'match.params.roomId'. Either include it or remove the dependency array.","ArrayExpression",["118"],"React Hook useEffect has missing dependencies: 'roomCode' and 'socket'. Either include them or remove the dependency array.",["119"],"React Hook useEffect has missing dependencies: 'history.location.state.clientId', 'setCurrentUser', 'setHostUser', 'setUsers', and 'socket'. Either include them or remove the dependency array.",["120"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement",["116"],["117"],"React Hook useEffect contains a call to 'setGameWinner'. Without a list of dependencies, this can lead to an infinite chain of updates. To fix this, pass [props.gameOver, props.players] as a second argument to the useEffect Hook.",["121"],"'WhiteCard' is defined but never used.",["116"],["117"],"no-global-assign","no-unsafe-negation",{"desc":"122","fix":"123"},{"desc":"124","fix":"125"},{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},"Update the dependencies array to be: [match.params.roomId]",{"range":"130","text":"131"},"Update the dependencies array to be: [roomCode, socket]",{"range":"132","text":"133"},"Update the dependencies array to be: [history.location.state.clientId, setCurrentUser, setHostUser, setUsers, socket, users]",{"range":"134","text":"135"},"Add dependencies array: [props.gameOver, props.players]",{"range":"136","text":"137"},[686,688],"[match.params.roomId]",[1323,1325],"[roomCode, socket]",[1712,1719],"[history.location.state.clientId, setCurrentUser, setHostUser, setUsers, socket, users]",[591,591],", [props.gameOver, props.players]"]