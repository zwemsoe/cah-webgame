[{"/Users/zwe/Desktop/cah-webgame/ts-client/src/index.tsx":"1","/Users/zwe/Desktop/cah-webgame/ts-client/src/reportWebVitals.ts":"2","/Users/zwe/Desktop/cah-webgame/ts-client/src/App.tsx":"3","/Users/zwe/Desktop/cah-webgame/ts-client/src/screens/Home.tsx":"4","/Users/zwe/Desktop/cah-webgame/ts-client/src/screens/Room.tsx":"5","/Users/zwe/Desktop/cah-webgame/ts-client/src/components/Navbar.tsx":"6","/Users/zwe/Desktop/cah-webgame/ts-client/src/hooks/useLocalStorage.ts":"7","/Users/zwe/Desktop/cah-webgame/ts-client/src/contexts/SocketContext.ts":"8","/Users/zwe/Desktop/cah-webgame/ts-client/src/utils/index.ts":"9","/Users/zwe/Desktop/cah-webgame/ts-client/src/components/Lobby.tsx":"10","/Users/zwe/Desktop/cah-webgame/ts-client/src/game/ui/GameRoom.tsx":"11","/Users/zwe/Desktop/cah-webgame/ts-client/src/game/ui/ScoreBoard.tsx":"12"},{"size":500,"mtime":1612988111843,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":1612988111844,"results":"15","hashOfConfig":"14"},{"size":940,"mtime":1613515163042,"results":"16","hashOfConfig":"14"},{"size":2095,"mtime":1613514913510,"results":"17","hashOfConfig":"14"},{"size":3126,"mtime":1613517693688,"results":"18","hashOfConfig":"14"},{"size":1380,"mtime":1613510172964,"results":"19","hashOfConfig":"14"},{"size":597,"mtime":1612988111843,"results":"20","hashOfConfig":"14"},{"size":214,"mtime":1612988111842,"results":"21","hashOfConfig":"14"},{"size":489,"mtime":1613435812177,"results":"22","hashOfConfig":"14"},{"size":3775,"mtime":1613515045162,"results":"23","hashOfConfig":"14"},{"size":303,"mtime":1613516166748,"results":"24","hashOfConfig":"14"},{"size":493,"mtime":1613517919142,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"ce1qkj",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"28"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"28"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56"},"/Users/zwe/Desktop/cah-webgame/ts-client/src/index.tsx",[],["57","58"],"/Users/zwe/Desktop/cah-webgame/ts-client/src/reportWebVitals.ts",[],"/Users/zwe/Desktop/cah-webgame/ts-client/src/App.tsx",["59","60"],"import { useEffect, useState } from \"react\";\nimport { BrowserRouter, Route, Switch, Redirect } from \"react-router-dom\";\nimport Home from \"./screens/Home\";\nimport Room from \"./screens/Room\";\nimport {SocketContext, socket} from './contexts/SocketContext';\n\nconst App = () => {\n  const [clientName, setClientName] = useState<string>(\"\");\n\n  useEffect(() => {\n    console.log(\"clientname: \", clientName);\n    return () => {\n      console.log(\"unmounting\");\n      socket.close();\n    };\n  }, []);\n\n\n  return (\n    <BrowserRouter>\n      <Switch> \n        <SocketContext.Provider value={socket}>\n          <Route path='/' exact render={(props) => <Home {...props} setClientName={setClientName}/>} />\n          <Route path='/game/:roomId' exact render={(props) => clientName ? <Room {...props}/> : <Home {...props} setClientName={setClientName}/>} />\n        </SocketContext.Provider>\n    </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default App;","/Users/zwe/Desktop/cah-webgame/ts-client/src/screens/Home.tsx",["61","62"],"import { useState, useEffect, useContext, useRef } from \"react\";\nimport { Navbar } from \"../components/Navbar\";\nimport { SocketContext } from \"../contexts/SocketContext\";\nimport { v4 as uuid } from 'uuid';\n\ninterface Props {\n  history: any,\n  setClientName: any,\n  match: any,\n}\n\nexport default function Home({ history, setClientName, match }: Props) {\n  const [name, setName] = useState(\"\");\n  const [code, setCode] = useState(\"\");\n  const [isLoading, setLoading] = useState(false);\n  const socket = useContext(SocketContext);\n  \n  useEffect(() => {\n    const roomCode = match.params.roomId;\n    if(match.params.roomId){\n      setCode(roomCode);\n    } else {\n      setCode(uuid());\n    }\n  }, []);\n\n  const handleJoin = () => {\n    if(name){\n      setLoading(true);\n\n      const clientId = uuid();\n      socket.emit(\"join room\", {\n        roomCode: code,\n        clientName: name,\n        clientId: clientId,\n      });\n\n      setTimeout(() => {\n        history.push(\"/game/\" + code, { clientId });\n        setClientName(name);\n      }, 2000);\n    } else {\n      alert(\"Please fill in your name.\")\n    }\n    \n  };\n\n\n  if (isLoading) {\n    return (\n      <>\n        <p className=\"font-extrabold\">Loading...</p>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Navbar />\n      <div className=\"grid place-items-center w-screen h-screen\">\n        <div>\n          <div className=\"max-w-md bg-white border-2 border-gray-300 p-6 rounded-md tracking-wide shadow-lg\">\n            <input\n              className=\"rounded-sm px-4 py-3 mt-3 focus:outline-none bg-gray-100 w-full\"\n              type=\"text\"\n              placeholder=\"Your Name\"\n              onChange={(e) => {\n                setName(e.target.value);\n              }}\n            />\n            <div className=\"grid grid-flow-col mt-3\">\n              <button\n                className=\"bg-yellow-500 hover:bg-yellow-300 text-black font-bold h-10 rounded-full\"\n                onClick={handleJoin}\n              >\n                Join Room\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","/Users/zwe/Desktop/cah-webgame/ts-client/src/screens/Room.tsx",["63","64"],"import { useState, useEffect, useContext, useRef } from \"react\";\nimport Lobby from \"../components/Lobby\";\nimport { SocketContext } from \"../contexts/SocketContext\";\nimport GameRoom from \"../game/ui/GameRoom\";\nimport useLocalStorage from \"../hooks/useLocalStorage\";\nimport { User, Setting, Player} from \"../interfaces\";\n\ninterface Props {\n  history: any;\n  match: any;\n}\n\nvar defaultSetting: Setting = {\n  rounds: 3,\n  judgeTime: 60,\n  pickTime: 60,\n};\n\nexport default function Room({ match, history }: Props) {\n  const roomCode = match.params.roomId;\n  const [users, setUsers] = useLocalStorage(`room-Users-${roomCode}`, []);\n  const [hostUser, setHostUser] = useLocalStorage(\n    `host-User-${roomCode}`,\n    undefined\n  );\n  const [currentUser, setCurrentUser] = useLocalStorage(\n    `current-User-${history.location.state.clientId}`,\n    undefined\n  );\n  const [lastJoined, setLastJoined] = useState<number | null>(null);\n  const [gameStarted, setGameStarted] = useState<boolean>(false);\n  const [setting, changeSetting] = useState<Setting>(defaultSetting);\n\n  const [players, setPlayers] = useState<Player[]>([]);\n  \n  \n  const settingRef = useRef(defaultSetting);\n  settingRef.current = setting;\n\n  const socket = useContext(SocketContext);\n\n  useEffect(() => {\n    socket.emit(\"get room users\", {\n      roomCode: roomCode,\n    });\n    socket.emit(\"get room setting\", { roomCode: roomCode });\n  }, []);\n\n  useEffect(() => {\n    socket.on(\"room status\", ({ clients }: { clients: User[] }) => {\n      console.log(`Clients: `, clients);\n      setUsers(clients);\n      if (clients.length !== 0) {\n        setLastJoined(clients.length - 1);\n        setHostUser(clients[0]);\n        var id: string | undefined = history.location.state.clientId;\n        setCurrentUser(clients.find((client) => client.id === id));\n      }\n    });\n  }, [users]);\n\n  useEffect(() => {\n    socket.on(\"setting update\", ({ settings }: { settings: Setting }) => {\n      if (hostUser && currentUser) {\n        if (hostUser.id !== currentUser.id) {\n          changeSetting(settings);\n        }\n      }\n    });\n    socket.on(\"game start update\", ({players} : {players: Player[]}) => {\n        setGameStarted(true);\n        setPlayers(players);\n    });\n  });\n\n  const handleSetting = (e: any) => {\n    const { name, value } = e.target;\n    const parse_value = parseInt(value);\n    changeSetting((prevState) => ({\n      ...prevState,\n      [name]: parse_value,\n    }));\n    setTimeout(() => {\n      socket.emit(\"change setting\", {\n        settings: settingRef.current,\n        roomCode: roomCode,\n      });\n    }, 500);\n  };\n\n  const handleStartGame = () => {\n    setGameStarted(true);\n    socket.emit(\"start game\", { roomCode: roomCode });\n  };\n\n  return (\n    <>\n      {gameStarted ? (\n        <GameRoom players={players}/>\n      ) : (\n        <Lobby\n          setting={setting}\n          handleSetting={handleSetting}\n          players={users}\n          hostPlayer={hostUser}\n          currentPlayer={currentUser}\n          lastJoined={lastJoined}\n          handleStartGame={handleStartGame}\n          match = {match}\n        />\n      )}\n    </>\n  );\n}\n","/Users/zwe/Desktop/cah-webgame/ts-client/src/components/Navbar.tsx",[],"/Users/zwe/Desktop/cah-webgame/ts-client/src/hooks/useLocalStorage.ts",[],"/Users/zwe/Desktop/cah-webgame/ts-client/src/contexts/SocketContext.ts",[],"/Users/zwe/Desktop/cah-webgame/ts-client/src/utils/index.ts",[],["65","66"],"/Users/zwe/Desktop/cah-webgame/ts-client/src/components/Lobby.tsx",[],"/Users/zwe/Desktop/cah-webgame/ts-client/src/game/ui/GameRoom.tsx",["67"],"import ScoreBoard from \"./ScoreBoard\";\nimport { User, Player } from \"../../interfaces\";\n\ninterface Props {\n    players: Player[],\n}\n\nexport default function GameRoom(props: Props){\n    return (\n        <>\n            <p>Game Room</p>\n            <ScoreBoard players={props.players}/>\n        </>\n    )\n}","/Users/zwe/Desktop/cah-webgame/ts-client/src/game/ui/ScoreBoard.tsx",["68"],"import { User, Player } from \"../../interfaces\";\n\ninterface Props{\n    players: Player[]\n}\n\nexport default function ScoreBoard(props: Props) {\n    return (\n    <div>\n        <p>Score Board: </p>\n        <ul>\n            {props.players.map((player: Player, i: any) => {\n                return (\n                <li key={i}>\n                    {player.name} : {player.points} {player.isJudge && \"(Judge)\"}\n                </li>\n                )\n            })}\n        </ul>\n    </div>\n    )\n}",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":2,"column":40,"nodeType":"75","messageId":"76","endLine":2,"endColumn":48},{"ruleId":"77","severity":1,"message":"78","line":16,"column":6,"nodeType":"79","endLine":16,"endColumn":8,"suggestions":"80"},{"ruleId":"73","severity":1,"message":"81","line":1,"column":43,"nodeType":"75","messageId":"76","endLine":1,"endColumn":49},{"ruleId":"77","severity":1,"message":"82","line":25,"column":6,"nodeType":"79","endLine":25,"endColumn":8,"suggestions":"83"},{"ruleId":"77","severity":1,"message":"84","line":47,"column":6,"nodeType":"79","endLine":47,"endColumn":8,"suggestions":"85"},{"ruleId":"77","severity":1,"message":"86","line":60,"column":6,"nodeType":"79","endLine":60,"endColumn":13,"suggestions":"87"},{"ruleId":"69","replacedBy":"88"},{"ruleId":"71","replacedBy":"89"},{"ruleId":"73","severity":1,"message":"90","line":2,"column":10,"nodeType":"75","messageId":"76","endLine":2,"endColumn":14},{"ruleId":"73","severity":1,"message":"90","line":1,"column":10,"nodeType":"75","messageId":"76","endLine":1,"endColumn":14},"no-native-reassign",["91"],"no-negated-in-lhs",["92"],"@typescript-eslint/no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'clientName'. Either include it or remove the dependency array.","ArrayExpression",["93"],"'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'match.params.roomId'. Either include it or remove the dependency array.",["94"],"React Hook useEffect has missing dependencies: 'roomCode' and 'socket'. Either include them or remove the dependency array.",["95"],"React Hook useEffect has missing dependencies: 'history.location.state.clientId', 'setCurrentUser', 'setHostUser', 'setUsers', and 'socket'. Either include them or remove the dependency array.",["96"],["91"],["92"],"'User' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"97","fix":"98"},{"desc":"99","fix":"100"},{"desc":"101","fix":"102"},{"desc":"103","fix":"104"},"Update the dependencies array to be: [clientName]",{"range":"105","text":"106"},"Update the dependencies array to be: [match.params.roomId]",{"range":"107","text":"108"},"Update the dependencies array to be: [roomCode, socket]",{"range":"109","text":"110"},"Update the dependencies array to be: [history.location.state.clientId, setCurrentUser, setHostUser, setUsers, socket, users]",{"range":"111","text":"112"},[487,489],"[clientName]",[694,696],"[match.params.roomId]",[1403,1405],"[roomCode, socket]",[1833,1840],"[history.location.state.clientId, setCurrentUser, setHostUser, setUsers, socket, users]"]