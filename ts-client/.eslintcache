[{"/Users/zwe/dev/cah-webgame/ts-client/src/index.tsx":"1","/Users/zwe/dev/cah-webgame/ts-client/src/reportWebVitals.ts":"2","/Users/zwe/dev/cah-webgame/ts-client/src/App.tsx":"3","/Users/zwe/dev/cah-webgame/ts-client/src/contexts/SocketContext.ts":"4","/Users/zwe/dev/cah-webgame/ts-client/src/screens/Home.tsx":"5","/Users/zwe/dev/cah-webgame/ts-client/src/screens/Room.tsx":"6","/Users/zwe/dev/cah-webgame/ts-client/src/constants.ts":"7","/Users/zwe/dev/cah-webgame/ts-client/src/hooks/useLocalStorage.ts":"8","/Users/zwe/dev/cah-webgame/ts-client/src/components/Lobby.tsx":"9","/Users/zwe/dev/cah-webgame/ts-client/src/components/Navbar.tsx":"10","/Users/zwe/dev/cah-webgame/ts-client/src/utils/index.ts":"11","/Users/zwe/dev/cah-webgame/ts-client/src/components/game/GameRoom.tsx":"12","/Users/zwe/dev/cah-webgame/ts-client/src/components/game/Whitecard.tsx":"13","/Users/zwe/dev/cah-webgame/ts-client/src/components/game/ScoreBoard.tsx":"14","/Users/zwe/dev/cah-webgame/ts-client/src/components/game/Blackcard.tsx":"15","/Users/zwe/dev/cah-webgame/ts-client/src/components/game/WinnerCard.tsx":"16","/Users/zwe/dev/cah-webgame/ts-client/src/components/video/VideoPanel.tsx":"17","/Users/zwe/dev/cah-webgame/ts-client/src/components/video/Video.tsx":"18"},{"size":500,"mtime":1620961156998,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":1620961156999,"results":"21","hashOfConfig":"20"},{"size":943,"mtime":1625208374172,"results":"22","hashOfConfig":"20"},{"size":267,"mtime":1620961156995,"results":"23","hashOfConfig":"20"},{"size":2271,"mtime":1625294088158,"results":"24","hashOfConfig":"20"},{"size":6643,"mtime":1625297922486,"results":"25","hashOfConfig":"20"},{"size":270,"mtime":1620961156995,"results":"26","hashOfConfig":"20"},{"size":597,"mtime":1620961156997,"results":"27","hashOfConfig":"20"},{"size":4475,"mtime":1625211572930,"results":"28","hashOfConfig":"20"},{"size":1686,"mtime":1620961156994,"results":"29","hashOfConfig":"20"},{"size":455,"mtime":1625294024371,"results":"30","hashOfConfig":"20"},{"size":8696,"mtime":1625283115029,"results":"31","hashOfConfig":"20"},{"size":1596,"mtime":1620961156996,"results":"32","hashOfConfig":"20"},{"size":1485,"mtime":1620961156996,"results":"33","hashOfConfig":"20"},{"size":423,"mtime":1620961156995,"results":"34","hashOfConfig":"20"},{"size":499,"mtime":1620961156996,"results":"35","hashOfConfig":"20"},{"size":573,"mtime":1625292284270,"results":"36","hashOfConfig":"20"},{"size":645,"mtime":1625292282817,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"ot6ppn",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"40"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"40"},"/Users/zwe/dev/cah-webgame/ts-client/src/index.tsx",[],["78","79"],"/Users/zwe/dev/cah-webgame/ts-client/src/reportWebVitals.ts",[],"/Users/zwe/dev/cah-webgame/ts-client/src/App.tsx",[],"/Users/zwe/dev/cah-webgame/ts-client/src/contexts/SocketContext.ts",[],"/Users/zwe/dev/cah-webgame/ts-client/src/screens/Home.tsx",[],"/Users/zwe/dev/cah-webgame/ts-client/src/screens/Room.tsx",["80","81"],"/Users/zwe/dev/cah-webgame/ts-client/src/constants.ts",[],"/Users/zwe/dev/cah-webgame/ts-client/src/hooks/useLocalStorage.ts",[],"/Users/zwe/dev/cah-webgame/ts-client/src/components/Lobby.tsx",[],"/Users/zwe/dev/cah-webgame/ts-client/src/components/Navbar.tsx",[],"/Users/zwe/dev/cah-webgame/ts-client/src/utils/index.ts",[],"/Users/zwe/dev/cah-webgame/ts-client/src/components/game/GameRoom.tsx",["82"],"import ScoreBoard from \"./ScoreBoard\";\nimport { User, Player, WhiteCard, BlackCard, Setting } from \"../../interfaces\";\nimport { useState, useContext, useEffect } from \"react\";\nimport Whitecard from \"./Whitecard\";\nimport Blackcard from \"./Blackcard\";\nimport WinnerCard from \"./WinnerCard\";\nimport { SocketContext } from \"../../contexts/SocketContext\";\n\ninterface Props {\n  currentUser: User;\n  roomCode: string;\n  setting: Setting;\n  history: any;\n}\n\nexport default function GameRoom(props: Props) {\n  const [players, setPlayers] = useState<Player[]>([]);\n  const [currentPlayer, setCurrentPlayer] = useState<Player>();\n  const [currentBlackCard, setCurrentBlackCard] = useState<BlackCard | null>(\n    null\n  );\n  const [currentWhiteCard, setWhiteCard] = useState<WhiteCard>();\n  const [judgeWhiteCard, setJudgeWhiteCard] = useState<WhiteCard>();\n  const [winnerCard, setWinnerCard] = useState<WhiteCard>();\n  const [winnerPlayer, setWinnerPlayer] = useState<string>();\n  const [playedCards, setPlayedCards] = useState<WhiteCard[]>([]);\n  const [judgeMode, setJudgeMode] = useState(false);\n  const [submitClicked, setSubmitClicked] = useState(false);\n  const [nextClicked, setNextClicked] = useState(false);\n  const [hideNext, setHideNext] = useState(true);\n  const [hideSubmit, setHideSubmit] = useState(false);\n  const [round, setRound] = useState<Number>(1);\n\n  const [gameOver, setGameOver] = useState(false);\n  const socket = useContext(SocketContext);\n\n  useEffect(() => {\n    socket.on(\n      \"game init update\",\n      ({ players, blackCard }: { players: Player[]; blackCard: BlackCard }) => {\n        setPlayers(players);\n        const player = extractCurrentPlayer(players);\n        setCurrentPlayer(player);\n        setCurrentBlackCard(blackCard);\n        setWhiteCard(player?.cards[0]);\n      }\n    );\n\n    socket.on(\n      \"game state update player\",\n      ({\n        players,\n        shuffled,\n      }: {\n        players: Player[];\n        shuffled: WhiteCard[];\n      }) => {\n        setPlayers(players);\n        const player = extractCurrentPlayer(players);\n        setCurrentPlayer(player);\n        setPlayedCards(shuffled);\n        setJudgeMode(true);\n        setSubmitClicked(false);\n        setHideSubmit(true);\n      }\n    );\n    socket.on(\n      \"game state update judge\",\n      ({\n        players,\n        winnerCard,\n      }: {\n        players: Player[];\n        winnerCard: WhiteCard;\n      }) => {\n        setPlayers(players);\n        const player = extractCurrentPlayer(players);\n        setCurrentPlayer(player);\n        setWinnerCard(winnerCard);\n        setWinnerPlayer(extractPlayerById(winnerCard.cardOwner));\n        setJudgeMode(false);\n        setSubmitClicked(false);\n        setHideNext(false);\n      }\n    );\n\n    socket.on(\n        \"players update\",\n        ({\n          players,\n        }: {\n          players: Player[];\n        }) => {\n          setPlayers(players);\n          const player = extractCurrentPlayer(players);\n          setCurrentPlayer(player);\n        }\n      );\n\n    socket.on(\n      \"next turn client\",\n      ({\n        players,\n        blackCard,\n        round,\n      }: {\n        players: Player[];\n        blackCard: BlackCard;\n        round: Number;\n      }) => {\n        setPlayers(players);\n        const player = extractCurrentPlayer(players);\n        setCurrentPlayer(player);\n        setCurrentBlackCard(blackCard);\n        setPlayedCards([]);\n        setWhiteCard(undefined);\n        setWinnerCard(undefined);\n        setWinnerPlayer(undefined);\n        setJudgeWhiteCard(undefined);\n        setJudgeMode(false);\n        setSubmitClicked(false);\n        setNextClicked(false);\n        setHideSubmit(false);\n        setHideNext(true);\n        setRound(round);\n        if(round > props.setting.rounds) setGameOver(true);\n      }\n    );\n  }, [players]);\n\n  const extractCurrentPlayer = (players: Player[]) => {\n    for (let i = 0; i < players.length; i++) {\n      if (players[i].id === props.currentUser?.id) {\n        return players[i];\n      }\n    }\n  };\n\n  const extractPlayerById = (playerId: string | undefined) => {\n    for (let i = 0; i < players.length; i++) {\n      if (players[i].id === playerId) {\n        return players[i].name;\n      }\n    }\n  };\n\n  const handlePlayerSelect = (card: WhiteCard) => {\n    setWhiteCard(card);\n  };\n\n  const handleJudgeSelect = (card: WhiteCard) => {\n    setJudgeWhiteCard(card);\n  };\n\n  const renderWhiteCards = () => {\n    return (\n      <div>\n        {!currentPlayer?.isJudge && !hideSubmit && renderSubmitButton()}\n        <p>Your cards: </p>\n        {currentPlayer &&\n          currentPlayer.cards.map((card: WhiteCard, i: any) => {\n            return (\n              <div key={i}>\n                <Whitecard\n                  type=\"white\"\n                  card={card}\n                  handlePlayerSelect={handlePlayerSelect}\n                  currentWhiteCard={currentWhiteCard}\n                  currentPlayer={currentPlayer}\n                />\n              </div>\n            );\n          })}\n      </div>\n    );\n  };\n\n  const renderCurrentBlackCard = () => {\n    return (\n      <div>\n        <p>Black card: </p>\n        {currentBlackCard && <Blackcard card={currentBlackCard} />}\n        {winnerCard && winnerPlayer && (\n          <WinnerCard card={winnerCard} name={winnerPlayer} />\n        )}\n      </div>\n    );\n  };\n\n  const renderCardsReceived = () => {\n    return (\n      <div>\n        {renderSubmitButton()}\n        <p>Cards received (Judge Mode) : </p>\n        {playedCards.map((card: WhiteCard, i: any) => {\n          return (\n            <div key={i}>\n              <Whitecard\n                type=\"white-judge\"\n                card={card}\n                handleJudgeSelect={handleJudgeSelect}\n                judgeWhiteCard={judgeWhiteCard}\n                currentPlayer={currentPlayer}\n              />\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const renderCardsPlayed = () => {\n    return (\n      <div>\n        <p>Cards played : </p>\n        {playedCards.map((card: WhiteCard, i: any) => {\n          return (\n            <div key={i}>\n              <Whitecard card={card} disabled={true} />\n            </div>\n          );\n        })}\n      </div>\n    );\n  };\n\n  const handleSubmit = () => {\n    if (judgeMode) {\n      if (judgeWhiteCard) {\n        socket.emit(\"card select by judge\", {\n          cardId: judgeWhiteCard.id,\n          playerId: currentPlayer?.id,\n          roomCode: props.roomCode,\n        });\n        setSubmitClicked(true);\n      }\n    } else {\n      if (currentWhiteCard && !submitClicked) {\n          socket.emit(\"card select by player\", {\n            cardId: currentWhiteCard.id,\n            playerId: currentPlayer?.id,\n            roomCode: props.roomCode,\n          });\n          setSubmitClicked(true);\n      } \n    }\n  };\n\n  const renderSubmitButton = () => {\n    return (\n      <div>\n        <button\n          className={`${\n            submitClicked ? \"bg-green-500\" : \"bg-red-500\"\n          } hover:bg-green-500 text-white h-10 w-28 `}\n          onClick={handleSubmit}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  };\n\n  const handleNext = () => {\n    setNextClicked(true);\n    socket.emit(\"next turn\", {\n      playerId: currentPlayer?.id,\n      roomCode: props.roomCode,\n    });\n  };\n\n  const renderNextButton = () => {\n    return (\n      <div>\n        <button\n          className={`${\n            nextClicked ? \"bg-green-500\" : \"bg-yellow-500\"\n          } hover:bg-green-500 text-white h-10 w-28 `}\n          onClick={handleNext}\n        >\n          Next\n        </button>\n      </div>\n    );\n  };\n\n  const renderGameOver = () => {\n    return (\n      <div>\n        <p>Game Over</p>\n        <button\n          className=\"bg-blue-500 hover:bg-gray-500 text-white h-10 w-28 \"\n          onClick={() => {\n            socket.emit(\"delete room\", {roomCode: props.roomCode});\n            props.history.push(\"/\");\n          }}\n        >\n          Back to Home\n        </button>\n      </div>\n    );\n  };\n\n  return (\n    <>\n      <p>Game Room</p>\n      <ScoreBoard players={players} gameOver={gameOver}/>\n      {gameOver ? (\n        renderGameOver()\n      ) : (\n        <div>\n          <p className=\"text-2xl\">Round: {round}</p>\n          <div className=\"grid grid-cols-3 gap-5 mt-11\">\n            <div>{currentPlayer && renderWhiteCards()}</div>\n            <div>\n              {!hideNext && renderNextButton()}\n              {renderCurrentBlackCard()}\n              {playedCards && renderCardsPlayed()}\n            </div>\n            <div>\n              {currentPlayer?.isJudge && judgeMode && renderCardsReceived()}\n            </div>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","/Users/zwe/dev/cah-webgame/ts-client/src/components/game/Whitecard.tsx",[],"/Users/zwe/dev/cah-webgame/ts-client/src/components/game/ScoreBoard.tsx",[],"/Users/zwe/dev/cah-webgame/ts-client/src/components/game/Blackcard.tsx",[],"/Users/zwe/dev/cah-webgame/ts-client/src/components/game/WinnerCard.tsx",[],"/Users/zwe/dev/cah-webgame/ts-client/src/components/video/VideoPanel.tsx",["83","84"],"import { useEffect, useState } from \"react\";\nimport Video from \"./Video\";\nimport styled from \"styled-components\";\n\nconst StyledVideo = styled.video`\n    height: 125px;\n    width: 200px;\n    border: 1px solid blue;\n`;\n\nexport default function VideoPanel(props) {\n  return (\n    <div className=\"flex flex-col ...\">\n      <StyledVideo muted ref={props.userVideo} autoPlay playsInline />\n          {props.peers.map((peer: any, index: number) => {\n                return (\n                    <Video key={index} peer={peer} />\n                );\n          })}\n    </div>\n  );\n}\n","/Users/zwe/dev/cah-webgame/ts-client/src/components/video/Video.tsx",["85","86"],"import { useEffect, useState, useRef } from \"react\";\nimport styled from \"styled-components\";\n\nconst StyledVideo = styled.video`\n  height: 125px;\n  width: 200px;\n  border: 1px solid red;\n`;\n\nexport default function Video(props) {\n  // const custom_styling = {\n  //   border: \"1px solid blue\",\n  //   width: \"100px\",\n  //   height: \"100px\",\n  // };\n  const ref = useRef();\n\n    useEffect(() => {\n        props.peer.on(\"stream\", stream => {\n            //@ts-ignore\n            ref.current && (ref.current.srcObject = stream);\n        })\n    }, []);\n\n    return (\n        //@ts-ignore\n        <StyledVideo playsInline autoPlay ref={ref}/>\n    );\n}\n",{"ruleId":"87","replacedBy":"88"},{"ruleId":"89","replacedBy":"90"},{"ruleId":"91","severity":1,"message":"92","line":129,"column":6,"nodeType":"93","endLine":129,"endColumn":8,"suggestions":"94"},{"ruleId":"91","severity":1,"message":"95","line":150,"column":6,"nodeType":"93","endLine":150,"endColumn":21,"suggestions":"96"},{"ruleId":"91","severity":1,"message":"97","line":129,"column":6,"nodeType":"93","endLine":129,"endColumn":15,"suggestions":"98"},{"ruleId":"99","severity":1,"message":"100","line":1,"column":10,"nodeType":"101","messageId":"102","endLine":1,"endColumn":19},{"ruleId":"99","severity":1,"message":"103","line":1,"column":21,"nodeType":"101","messageId":"102","endLine":1,"endColumn":29},{"ruleId":"99","severity":1,"message":"103","line":1,"column":21,"nodeType":"101","messageId":"102","endLine":1,"endColumn":29},{"ruleId":"91","severity":1,"message":"104","line":23,"column":8,"nodeType":"93","endLine":23,"endColumn":10,"suggestions":"105"},"no-native-reassign",["106"],"no-negated-in-lhs",["107"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'addPeer', 'createPeer', 'history.location.state', 'peers', 'roomCode', and 'socket'. Either include them or remove the dependency array.","ArrayExpression",["108"],"React Hook useEffect has missing dependencies: 'history.location.state.clientId', 'setCurrentUser', 'setHostUser', and 'setUsers'. Either include them or remove the dependency array.",["109"],"React Hook useEffect has missing dependencies: 'extractCurrentPlayer', 'extractPlayerById', 'props.setting.rounds', and 'socket'. Either include them or remove the dependency array.",["110"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'props.peer'. Either include it or remove the dependency array.",["111"],"no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},{"desc":"114","fix":"115"},{"desc":"116","fix":"117"},{"desc":"118","fix":"119"},"Update the dependencies array to be: [addPeer, createPeer, history.location.state, peers, roomCode, socket]",{"range":"120","text":"121"},"Update the dependencies array to be: [users, socket, setUsers, setHostUser, history.location.state.clientId, setCurrentUser]",{"range":"122","text":"123"},"Update the dependencies array to be: [extractCurrentPlayer, extractPlayerById, players, props.setting.rounds, socket]",{"range":"124","text":"125"},"Update the dependencies array to be: [props.peer]",{"range":"126","text":"127"},[3905,3907],"[addPeer, createPeer, history.location.state, peers, roomCode, socket]",[4527,4542],"[users, socket, setUsers, setHostUser, history.location.state.clientId, setCurrentUser]",[3805,3814],"[extractCurrentPlayer, extractPlayerById, players, props.setting.rounds, socket]",[542,544],"[props.peer]"]